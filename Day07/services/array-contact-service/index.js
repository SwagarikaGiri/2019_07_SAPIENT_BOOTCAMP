// the name of this module relative to Day07 folder is:
// './services/array-contact-service' OR
// './services/array-contact-service/index'

const data = require('../../data');

const service = {}
service.createNewContact = (contact) => { 
    // contact must be an object with these required fields:
    // firstname, email, phone, city
    // If any of the fields are missing, an error should be thrown
    // with appropriate message. 
    // Check if a contact with email/phone already exists in the array,
    // if yes, then throw an error.
    // 'id' is autogenerated (use the max(id)+1 from the data)

    // if all is well, then contact should be appended to the data
};

service.updateContact = (contact) => { 
    
};
service.deleteContact = (id) => { 
    // id must be a number; otherwise throw an error
    // if id is found, then delete the corresponding contact from 'data'
    // else throw an error indicating the id is invalid
};

service.getContactById = (id) => {
    if (typeof id !== 'number') {
        throw new Error('id must be a number');
    }

    const index = data.findIndex(c => c.id === id);
    if (index === -1) {
        return null;
    }
    return { ...data[index] };
};

service.getAllContacts = (pageNum = 1, pageSize = 10, 
    sortBy = 'id', sortOrder='asc') => {

    // TODO: sort the data based on the field represented by 'sortBy' parameter
    // if the value of 'sortBy' is not a valid property of a contact, then
    // throw an error. 'sortOrder' may be 'asc' or 'desc' (any other should result
    // in an error being thrown). Based on the sortOrder the data must be sorted.

    if (typeof pageNum !== 'number' || pageNum <= 0) {
        throw new Error('pageNum must be a number >= 1');
    }
    if (typeof pageSize !== 'number' || pageSize <= 0) {
        throw new Error('pageSize must be a number >= 1');
    }

    const begin = (pageNum - 1) * pageSize;
    const end = begin + pageSize;
    const newData = data.slice(begin, end);
    return newData;
};
module.exports = service;